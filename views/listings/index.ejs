<% layout("/layouts/boilerplate.ejs") %>
<body>
  <div
    class="col-12 mx-auto mt-3 text-center p-1 border border-dark-subtle rounded-3 border-opacity-10"
  >
    <div
      class="filters-container border border-dark-subtle rounded-3 border-opacity-10"
    >
      <div id="filters" class="">
        <div class="filter">
          <div><i class="fa-solid fa-hotel"></i></div>
          <p>All</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-fire"></i></div>
          <p>Trending</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-bed"></i></div>
          <p>Rooms</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-mountain-city"></i></div>
          <p>Cities</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-mountain-sun"></i></div>
          <p>Mountains</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-chess-rook"></i></div>
          <p>Castles</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-person-swimming"></i></div>
          <p>Pools</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-campground"></i></div>
          <p>Camping</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-cow"></i></div>
          <p>Farms</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-snowflake"></i></div>
          <p>Arctic</p>
        </div>
        <div class="filter">
          <div><i class="fa-solid fa-umbrella-beach"></i></div>
          <p>Beaches</p>
        </div>
        <div class="tax-toggle">
          <div class="form-check-reverse form-switch">
            <input
              class="form-check-input"
              type="checkbox"
              role="switch"
              id="taxswitchCheckDefault"
            />
            <label class="form-check-label" for="taxswitchCheckDefault"
              >Tax Switch</label
            >
          </div>
        </div>
      </div>
    </div>
    <div class="listings-container">
      <div class="d-flex flex-wrap justify-content-center">
        <% for(let listings of allListings) {%>
        <a
          class="displaycard"
          href="/listings/<%= listings._id %>"
          data-categories="<%= JSON.stringify(listings.category) %>"
        >
          <div class="card" style="width: 20rem; height: 31rem">
            <img
              src="<%=listings.image.url%>"
              class="card-img-top"
              alt="listing_image"
              style="height: 20rem; object-fit: cover"
            />
            <div class="card-img-overlay">
              <%=listings.title%>
              <br />
              Â£<%=listings.price.toLocaleString("en-GB")%> / night <br />
            </div>
            <div class="card-body">
              <p class="card-text">
                <strong
                  ><b class="listing-title"><%=listings.title%> <br /> </b
                ></strong>
                <br />
                <%=listings.location%>, <%=listings.country%>
                <br />
              </p>
              <i class="tax-info">+20% VAT</i>
            </div>
          </div></a
        >
        <% } %>
      </div>
    </div>
  </div>
  <script>
    const taxswitch = document.querySelector("#taxswitchCheckDefault");
    taxswitch.addEventListener("click", () => {
      let taxinfo = document.querySelectorAll(".tax-info");
      taxinfo.forEach((item) => {
        if (item.style.display !== "block") {
          item.style.display = "block";
        } else {
          item.style.display = "none";
        }
      });
    });
  </script>
  <script>
    const filters = document.querySelectorAll(".filter");
    const cards = document.querySelectorAll(".displaycard");

    // Keep track of active filter
    let activeFilter = null;

    filters.forEach((filter) => {
      filter.addEventListener("click", () => {
        // Remove active class from previously selected filter
        if (activeFilter) {
          activeFilter.classList.remove("active");
        }
        // Add active class to current filter
        filter.classList.add("active");
        activeFilter = filter;

        const filterText = filter.textContent.trim().toLowerCase();

        cards.forEach((card) => {
          try {
            const categories = JSON.parse(card.getAttribute("data-categories"));

            // Show all if "All" is clicked
            if (filterText === "all") {
              card.style.display = "block";
            } else {
              // Check if any category matches the filter
              const hasMatch = categories.some(
                (category) =>
                  category.toLowerCase().includes(filterText) ||
                  filterText.includes(category.toLowerCase())
              );

              card.style.display = hasMatch ? "block" : "none";
            }
          } catch (error) {
            // Handle cases where data-categories might be problematic
            console.warn("Error parsing categories for card:", card, error);
            // Show card by default if there's an error
            card.style.display = "block";
          }
        });
      });
    });

    // Set "All" as default active filter on page load
    document.addEventListener("DOMContentLoaded", () => {
      const allFilter = Array.from(filters).find(
        (filter) => filter.textContent.trim().toLowerCase() === "all"
      );

      if (allFilter) {
        allFilter.classList.add("active");
        activeFilter = allFilter;
      }
    });
  </script>
</body>
